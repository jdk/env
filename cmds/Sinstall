COMMANDS="install ${COMMANDS}"

install_SHORT_HELP="install a manifest"
install_LONG_HELP="usage: install <manifest> [destination (default:~)]"

handle_file () {
	SRC="${1}"
	DEST="${2}"

	mkdir -p "$(dirname $DEST)"

	if [ -e "$DEST" ]; then
		echo "Skipping: file '$DEST' already exists"
	else
		[ -e "$SRC" ] && cp "$SRC" "$DEST" || \
			echo "Warning: Source does not exist: $SRC"
	fi
}

handle_link () {
	SRC="${1}"
	DEST="${2}"

	mkdir -p "$(dirname $DEST)"

	if [ -e "$DEST" -o -L "$DEST" ]; then
		[ "$(readlink $DEST)" == "$SRC" ] || \
			echo "Skipping: file '$DEST' already exists"
	else
		[ -e "$SRC" ] && ln -s "$SRC" "$DEST" || \
			echo "Warning: Source does not exist: $SRC"
	fi
}

handle_gitsub () {
	SUB=${1%%/}
	(cd "$(dirname $SUB)" && git submodule update --init "$(basename $SUB)")
}

handle_entry () {
	DESTDIR="${1}"
	shift
	SRCDIR="${1}"
	shift
	TYPE="${1}"
	shift
	case "$TYPE" in
		"FILE" )
			DEST="${DESTDIR}/${1}"
			SRC="$(abspath ${SRCDIR}/${2})"
			handle_file "$SRC" "$DEST"
			;;

		"LINK" )
			DEST="${DESTDIR}/${1}"
			SRC="$(abspath ${SRCDIR}/${2})"
			handle_link "$SRC" "$DEST"
			;;
		"GITSUB" )
			SUB="$(abspath ${SRCDIR}/${1})"
			handle_gitsub "$SUB"
			;;
		* )
			echo "Warning: Invalid type: $1"
			;;
	esac
}

cmd_install () {
	MANIFEST="$1"
	DESTDIR="${2:-${HOME}}"

	SRCDIR="$(dirname $MANIFEST)"

	if [ ! -e "$MANIFEST" ]; then
		error_exit "Manifest not found"
	fi

	if [ ! -d "$DESTDIR" ]; then
		error_exit "Destination not found"
	fi

	awk 'BEGIN { FS="[\t]+"; }
			/^[A-Z]/ {
				for(ii = 1; ii <= NF; ii++) {
					printf(" \"%s\"", $ii);
				}
				printf("\n");
			}
			' "$MANIFEST" | while read handleargs; do
		eval handle_entry "\"$DESTDIR\"" "\"$SRCDIR\"" $handleargs
	done
}

# vim:filetype=sh
